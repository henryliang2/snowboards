[{"/Users/henryliang/js/snowboards/src/index.js":"1","/Users/henryliang/js/snowboards/src/App.js":"2","/Users/henryliang/js/snowboards/src/reportWebVitals.js":"3","/Users/henryliang/js/snowboards/src/Components/SnowboardList.js":"4","/Users/henryliang/js/snowboards/src/Resources/Queries.js":"5","/Users/henryliang/js/snowboards/src/Components/Landing.js":"6","/Users/henryliang/js/snowboards/src/Components/Navigation.js":"7","/Users/henryliang/js/snowboards/src/Components/ManufacturerHeader.js":"8","/Users/henryliang/js/snowboards/src/Components/SnowboardShowcase.js":"9"},{"size":748,"mtime":1606939848491,"results":"10","hashOfConfig":"11"},{"size":2269,"mtime":1607070691188,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1606893458322,"results":"13","hashOfConfig":"11"},{"size":1985,"mtime":1607031924209,"results":"14","hashOfConfig":"11"},{"size":754,"mtime":1606989085949,"results":"15","hashOfConfig":"11"},{"size":2538,"mtime":1607070022883,"results":"16","hashOfConfig":"11"},{"size":371,"mtime":1606898918210,"results":"17","hashOfConfig":"11"},{"size":1008,"mtime":1607031727093,"results":"18","hashOfConfig":"11"},{"size":2173,"mtime":1607069264262,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"lj3ufq",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/henryliang/js/snowboards/src/index.js",[],["41","42"],"/Users/henryliang/js/snowboards/src/App.js",[],"/Users/henryliang/js/snowboards/src/reportWebVitals.js",[],"/Users/henryliang/js/snowboards/src/Components/SnowboardList.js",["43"],"import React, { useEffect, useContext, useCallback } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { QueryArgumentContext, SnowboardContext } from '../App';\n\nconst SnowboardList = (props) => {\n\n  let { type, manufacturer } = useParams();\n  const { setSnowboards } = useContext(SnowboardContext);\n  const { setQueryArguments } = useContext(QueryArgumentContext);\n\n  const getQueryFromParams = useCallback(() => {\n    setSnowboards([]);\n    if (type) setQueryArguments({ type });\n    if (manufacturer) setQueryArguments({ manufacturer });\n  }, [type, manufacturer])\n\n  useEffect(() => {\n    getQueryFromParams();\n  }, [getQueryFromParams]);\n\n  return (\n    <div className='card__container'>\n      { props.snowboards &&\n        props.snowboards.map((snowboard, i) => {\n          const upperCasedName = snowboard.name.toUpperCase();\n\n          return (\n            <div className='card' key={i}>\n\n              <div className='card__name'><Link to={`/snowboard/${snowboard.name}`}>{upperCasedName}</Link></div>\n\n              <div className='card__info'>\n                <div className='card__type'>\n                  <span className='card__descriptor'>TYPE:&nbsp;</span>\n                  {snowboard.directional ? 'Directional' : 'Twin'}\n                </div>\n                <div className='card__style'>\n                  <span className='card__descriptor'>STYLE:&nbsp;</span>\n                  <Link to={`/type/${snowboard.style}`}>{snowboard.style}</Link>\n                </div>\n                <div className='card__manufacturer'>\n                  <span className='card__descriptor'>BUILT BY:&nbsp;</span>\n                  <Link to={`/manufacturer/${snowboard.manufacturer}`}>{snowboard.manufacturer}</Link>\n                </div>\n              </div>\n              \n              <div className='card__image'><img src={snowboard.image} alt={snowboard.name} /></div>\n            </div>\n          )}\n    )}\n  </div>\n  );\n\n}\n\nexport default SnowboardList;","/Users/henryliang/js/snowboards/src/Resources/Queries.js",[],"/Users/henryliang/js/snowboards/src/Components/Landing.js",[],"/Users/henryliang/js/snowboards/src/Components/Navigation.js",[],"/Users/henryliang/js/snowboards/src/Components/ManufacturerHeader.js",["44","45","46","47"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport queries from './../Resources/Queries';\nimport './../Styles/ManufacturerHeader.css';\n\nconst ManufacturerHeader = (props, { client }) => {\n\n  const { manufacturer } = useParams();\n  const { data } = useQuery(queries.GET_MANUFACTURER, {\n    variables: { name: manufacturer}\n  })\n  \n  const [name, setName] = useState('');\n  const [logo, setLogo] = useState('');\n  const [location, setLocation] = useState('');\n  const [coordinates, setCoordinates] = useState('');\n\n  useEffect(() => {\n    if(data){\n      console.log(data.manufacturer)\n      setLogo(data.manufacturer.logo)\n      setName(data.manufacturer.name.toUpperCase());\n    }\n  }, [data])\n\n  return (\n    <div className='header'>\n      <div className='header__logo'><img src={logo} alt='logo' /></div>\n      <div className='header__name'>{ name }</div>\n    </div>\n  );\n}\n\nexport default ManufacturerHeader;","/Users/henryliang/js/snowboards/src/Components/SnowboardShowcase.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":15,"column":6,"nodeType":"54","endLine":15,"endColumn":26,"suggestions":"55"},{"ruleId":"56","severity":1,"message":"57","line":16,"column":10,"nodeType":"58","messageId":"59","endLine":16,"endColumn":18},{"ruleId":"56","severity":1,"message":"60","line":16,"column":20,"nodeType":"58","messageId":"59","endLine":16,"endColumn":31},{"ruleId":"56","severity":1,"message":"61","line":17,"column":10,"nodeType":"58","messageId":"59","endLine":17,"endColumn":21},{"ruleId":"56","severity":1,"message":"62","line":17,"column":23,"nodeType":"58","messageId":"59","endLine":17,"endColumn":37},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'setQueryArguments' and 'setSnowboards'. Either include them or remove the dependency array.","ArrayExpression",["65"],"no-unused-vars","'location' is assigned a value but never used.","Identifier","unusedVar","'setLocation' is assigned a value but never used.","'coordinates' is assigned a value but never used.","'setCoordinates' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [setSnowboards, type, setQueryArguments, manufacturer]",{"range":"68","text":"69"},[569,589],"[setSnowboards, type, setQueryArguments, manufacturer]"]
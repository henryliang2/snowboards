[{"/Users/henryliang/js/snowboards/src/index.js":"1","/Users/henryliang/js/snowboards/src/App.js":"2","/Users/henryliang/js/snowboards/src/reportWebVitals.js":"3","/Users/henryliang/js/snowboards/src/Components/SnowboardList.js":"4","/Users/henryliang/js/snowboards/src/Resources/Queries.js":"5","/Users/henryliang/js/snowboards/src/Components/Landing.js":"6","/Users/henryliang/js/snowboards/src/Components/Navigation.js":"7","/Users/henryliang/js/snowboards/src/Components/ManufacturerHeader.js":"8","/Users/henryliang/js/snowboards/src/Components/SnowboardShowcase.js":"9","/Users/henryliang/js/snowboards/src/Components/SnowboardCard.js":"10"},{"size":748,"mtime":1606939848491,"results":"11","hashOfConfig":"12"},{"size":2504,"mtime":1607236046363,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1606893458322,"results":"14","hashOfConfig":"12"},{"size":939,"mtime":1607072808622,"results":"15","hashOfConfig":"12"},{"size":768,"mtime":1607233830396,"results":"16","hashOfConfig":"12"},{"size":2862,"mtime":1607230132073,"results":"17","hashOfConfig":"12"},{"size":569,"mtime":1607229920172,"results":"18","hashOfConfig":"12"},{"size":1123,"mtime":1607074622930,"results":"19","hashOfConfig":"12"},{"size":3134,"mtime":1607237189697,"results":"20","hashOfConfig":"12"},{"size":1775,"mtime":1607212795204,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"lj3ufq",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"/Users/henryliang/js/snowboards/src/index.js",[],["45","46"],"/Users/henryliang/js/snowboards/src/App.js",[],"/Users/henryliang/js/snowboards/src/reportWebVitals.js",[],"/Users/henryliang/js/snowboards/src/Components/SnowboardList.js",["47"],"import React, { useEffect, useContext, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { QueryArgumentContext, SnowboardContext } from '../App';\nimport SnowboardCard from './SnowboardCard';\n\nconst SnowboardList = (props) => {\n\n  let { type, manufacturer } = useParams();\n  const { setSnowboards } = useContext(SnowboardContext);\n  const { setQueryArguments } = useContext(QueryArgumentContext);\n\n  const getQueryFromParams = useCallback(() => {\n    setSnowboards([]);\n    if (type) setQueryArguments({ type });\n    if (manufacturer) setQueryArguments({ manufacturer });\n  }, [type, manufacturer])\n\n  useEffect(() => {\n    getQueryFromParams();\n  }, [getQueryFromParams]);\n\n  return (\n    <div className='card__container'>\n      { props.snowboards &&\n        props.snowboards.map(snowboard => <SnowboardCard snowboard={snowboard} key={snowboard.name}/>\n    )}\n  </div>\n  );\n\n}\n\nexport default SnowboardList;","/Users/henryliang/js/snowboards/src/Resources/Queries.js",[],"/Users/henryliang/js/snowboards/src/Components/Landing.js",[],"/Users/henryliang/js/snowboards/src/Components/Navigation.js",[],"/Users/henryliang/js/snowboards/src/Components/ManufacturerHeader.js",[],"/Users/henryliang/js/snowboards/src/Components/SnowboardShowcase.js",[],"/Users/henryliang/js/snowboards/src/Components/SnowboardCard.js",["48"],"import React, { useEffect, useRef, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport './../App.css'\n\nconst SnowboardCard = ({ snowboard }) => {\n\n  const upperCasedName = snowboard.name.toUpperCase();\n\n  const cardRef = useRef(null);\n  const imageRef = useRef(null);\n  const history = useHistory();\n\n  const handleImageLoaded = () => {\n    cardRef.current.classList.add('fade-in');\n  }\n\n  useEffect(() => {\n    if(imageRef.current && imageRef.current.complete) handleImageLoaded();\n  })\n\n  return (\n    <div className='card' ref={ cardRef }>\n      <div className='card__name'>\n        <span className='card__link'>\n          <Link to={`/snowboard/${snowboard.name}`}>{upperCasedName}</Link>\n        </span>\n      </div>\n      <div className='card__info'>\n        <div className='card__type'>\n          <span className='card__descriptor'>TYPE:&nbsp;</span>\n          {snowboard.directional ? 'Directional' : 'Twin'}\n        </div>\n        <div className='card__style'>\n          <span className='card__descriptor'>STYLE:&nbsp;</span>\n          <span className='card__link'><Link to={`/type/${snowboard.style}`}>{snowboard.style}</Link></span>\n        </div>\n        <div className='card__manufacturer'>\n          <span className='card__descriptor'>BUILT BY:&nbsp;</span>\n          <span className='card__link'><Link to={`/manufacturer/${snowboard.manufacturer}`}>{snowboard.manufacturer}</Link></span>\n        </div>\n      </div>\n      <div>\n        <img \n          className='card__image'\n          src={snowboard.image} \n          alt={snowboard.name}\n          onLoad={ handleImageLoaded }\n          onClick={() => { history.push(`/snowboard/${snowboard.name}`) }}\n          />\n      </div>\n    </div>\n  )\n\n}\n\nexport default SnowboardCard;",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":16,"column":6,"nodeType":"55","endLine":16,"endColumn":26,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":36,"nodeType":"59","messageId":"60","endLine":1,"endColumn":44},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'setQueryArguments' and 'setSnowboards'. Either include them or remove the dependency array.","ArrayExpression",["63"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},"Update the dependencies array to be: [setSnowboards, type, setQueryArguments, manufacturer]",{"range":"66","text":"67"},[608,628],"[setSnowboards, type, setQueryArguments, manufacturer]"]